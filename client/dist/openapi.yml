openapi: 3.0.0
info:
  title: ZUPZUP API
  description: This is ZUPZUP Backend API
  version: '1'
servers:
  - url: https://etrn16p7n7.execute-api.ap-northeast-2.amazonaws.com/dev/
    description: AWS LABMDA DEVELOPMENT
  - url: https://etrn16p7n7.execute-api.ap-northeast-2.amazonaws.com/prod/
    description: AWS LABMDA PRODUCTION
  - url: http://localhost:4000/
    description: LOCAL SERVER
components:
  schemas:
    CinemaModel:
      type: object
      properties:
        cinemaId:
          type: integer
          example: 1013
        divisionCode:
          type: integer
          example: 1
        detailDivisionCode:
          type: string
          example: '0001'
        regionName:
          type: string
          example: '서울'
        cinemaName:
          type: string
          example: '가산디지털'
    ScreenModel:
      type: object
      properties:
        screenId:
          type: integer
          example: 100702
        movieId:
          type: integer
          example: 12963
        startTime:
          type: string
          example: '24:50'
        endTime:
          type: string
          example: '27:21'
        totalSeatCount:
          type: integer
          example: 165
        bookingSeatCount:
          type: integer
          example: 161
    MovieModel:
      type: object
      properties:
        movieName:
          type: string
          example: 신과함께-인과 연
        movieImage:
          type: string
          example: http://caching.lottecinema.co.kr//Media/MovieFile/MovieImg/201808/12963_103_1.jpg
    AlarmModel:
      type: object
      properties:
        movieId:
          type: integer
          example: 12963
        alarmDate:
          type: string
          example: '2020-02-20'
        startTime:
          type: string
          example: '24:50'
        endTime:
          type: string
          example: '27:21'
        seatNoList:
          type: array
          items:
            type: string
            example: "1B03"
    UserModel:
      type: object
      properties:
        email:
          type: string
          example: example@example.com
        password:
          type: string
          example: examplepassword
    ErrorResponse:
      description: '[WIP]'
      type: object
      properties:
        code:
          type: integer
        errorMessages:
          type: array
          items:
            type: string
  responses:
    UnauthorizedError:
      description: '[WIP] 토큰이 없거나 만료되었습니다.'
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
security:
  - BearerAuth: []

paths:
  /signIn:
    post:
      tags:
        - 인증
      operationId: signIn
      summary: '[WIP] 로그인하여 토큰을 발급합니다.'
      description: '[WIP] 로그인하여 토큰을 발급합니다.'
      parameters: []
      responses:
        '201':
          description: JWT 토큰
          content:
            text/plain:
              schema:
                type: string
                example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoidXNlcmlkIiwiaWF0IjoxNTM0Njk3MzQ0LCJleHAiOjE1MzQ3ODM3NDR9.d1wTlMMJM1I89kCZeS9GhbbAlwehpGHiLcV0bCyFqkk'
  /signUp:
    post:
      tags:
        - 인증
      operationId: signIn
      summary: '[WIP] 가입하여 유저를 생성합니다.'
      description: '[WIP] 가입하여 유저를 생성합니다.'
      consumes:
        - application/json
      requestBody:
        description: User Object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModel'
      responses:
        '201':
          description: 생성됨


  /cinemas:
    get:
      tags:
        - 영화관
      operationId: getCinemas
      summary: 영화관 목록을 받아옵니다.
      description: 영화관 목록을 받아옵니다.
      parameters: []
      responses:
        '200':
          description: 시네마 리스트
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CinemaModel'
  /screens:
    get:
      tags:
        - 영화관
      operationId: getScreens
      summary: 상영관 목록을 받아옵니다.
      description: 상영관 목록을 받아옵니다.
      parameters:
        - in: query
          name: cinemaIds
          schema:
            type: string
          required: true
          description : 시네마 아이디 리스트
          example : 1|0001|1007,1|0001|1013
        - in: query
          name: alarmDate
          schema:
            type: string
          description : YYYY-MM-DD 형식으로 표현된 상영일자. *(기본값, 오늘)*
      responses:
        '200':
          description: 시네마 리스트
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScreenModel'

  /movies/{movieId}:
    get:
      tags:
        - 영화관
      operationId: getMovie
      summary: 영화에 대한 정보를 가져옵니다.
      description: 영화에 대한 정보를 가져옵니다.
      parameters:
        - in: path
          name: movieId
          schema:
            type: integer
          required: true
          description : 영화 아이디
          example : 12963
      responses:
        '200':
          description: 영화정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieModel'

  /alarms:
    get:
      security:
        - bearerAuth: []
      tags:
        - 알람
      operationId: getAlarms
      summary: '[WIP] 로그인된 유저의 등록된 알람을 가져옵니다.'
      description: '[WIP] 로그인된 유저의 등록된 알람을 가져옵니다.'
      responses:
        '200':
          description: 알람 리스트
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlarmModel'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      security:
        - bearerAuth: []
      tags:
        - 알람
      operationId: postAlarms
      summary: '[WIP] 로그인된 유저의 알람을 등록합니다.'
      description: '[WIP] 로그인된 유저의 알람을 등록합니다.'
      requestBody:
        description: Alarm Object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlarmModel'
      responses:
        '200':
          description: 생성됨
        '401':
          $ref: '#/components/responses/UnauthorizedError'

